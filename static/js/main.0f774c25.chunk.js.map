{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","MyCheckBox","name","index","flipFunc","checked","Grid","item","xs","Checkbox","defaultChecked","onChange","id","String","nameArray","React","useReducer","state","action","console","log","nextState","slice","map","checkedState","dispacher","useState","filter","v","length","onValueState","setOnValueState","useEffect","flipChangedState","event","Number","target","a","checkedA","setCheckedA","Container","fixed","container","spacing","color","inputProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAoGeA,MA5Ff,WACI,IAAMC,EAAa,SAAC,GAA8G,IAA7GC,EAA4G,EAA5GA,KAAMC,EAAsG,EAAtGA,MAAOC,EAA+F,EAA/FA,SAAUC,EAAqF,EAArFA,QACxC,OACI,mCACI,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,UACKN,EACD,cAACO,EAAA,EAAD,CAAUC,gBAAc,EAACL,QAASA,EAASM,SAAUP,EAAUQ,GAAIC,OAAOV,WAKpFW,EAAqB,CAAC,WAAW,WAAY,QAXxC,EAqBwBC,IAAMC,YATzB,SAACC,EAAiBC,GAC9BC,QAAQC,IAAI,kBAAoBP,OAAOK,EAAOf,QAC9CgB,QAAQC,IAAIF,GACZ,IAAIG,EAAYJ,EAAMK,QAItB,OAHAD,EAAUH,EAAOf,QAAUc,EAAMC,EAAOf,OACxCgB,QAAQC,IAAIH,GACZE,QAAQC,IAAIC,GACLA,IAEkDP,EAAUS,KAAI,kBAAI,MArBpE,mBAqBHC,EArBG,KAqBWC,EArBX,OAsB6BV,IAAMW,SAASF,EAAaG,QAAO,SAAAC,GAAC,OAAGA,KAAGC,QAtBvE,mBAsBJC,EAtBI,KAsBUC,EAtBV,KAyBXC,qBACI,WAAMD,EAAgBP,EAAaG,QAAO,SAAAC,GAAC,OAAGA,KAAGC,QAAQV,QAAQC,IAAI,gBAAgBD,QAAQC,IAAII,KAAgB,CAACA,IAStH,IAAMS,EAAmB,SAACC,GAmBtBf,QAAQC,IAAI,mBACZK,EACI,CAACtB,MAAMgC,OAAOD,EAAME,OAAOxB,IAC3ByB,EAAE,MAENlB,QAAQC,IAAI,wBA3DL,EAgEqBL,IAAMW,UAAS,GAhEpC,mBAgEJY,EAhEI,KAgEMC,EAhEN,KAwEX,OACI,mCACI,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACnC,EAAA,EAAD,CAAMoC,WAAS,EAACC,QAAS,EAAzB,SACK7B,EAAUS,KAAI,SAACrB,EAAKC,GAAN,OAAe,cAACF,EAAD,CAAYC,KAAMA,EAAMC,MAAOA,EAAOC,SAAU6B,EAAkB5B,QAASmB,EAAarB,UAEzH2B,EACD,cAACrB,EAAA,EAAD,CAAUC,gBAAc,EAACL,QAASmB,EAAa,KAC/C,cAACf,EAAA,EAAD,CACIC,gBAAc,EACdL,QAASiC,EACT3B,SAlBM,SAACuB,GACnBf,QAAQC,IAAII,GACZe,EAAYL,EAAME,OAAO/B,UAiBbuC,MAAM,UACNC,WAAY,CAAE,aAAc,8BC/EjCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f774c25.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\n\r\n\r\nfunction App() {\r\n    const MyCheckBox = ({name, index, flipFunc, checked}:{name:string, index:number, flipFunc:(event:any)=>any, checked:boolean}) => {\r\n        return(\r\n            <>\r\n                <Grid item xs={3}>\r\n                    {name}\r\n                    <Checkbox defaultChecked checked={checked} onChange={flipFunc} id={String(index)}/>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n    const nameArray:string[] = [\"element1\",\"element2\", \"hoge\"];\r\n    const reducer = (state:boolean[], action:{index:number, a?:any}) => {\r\n        console.log(\"dispatch reduce\" + String(action.index))\r\n        console.log(action)\r\n        let nextState = state.slice();\r\n        nextState[action.index] = !state[action.index]\r\n        console.log(state)\r\n        console.log(nextState)\r\n        return nextState;\r\n    }\r\n    const [ checkedState, dispacher] = React.useReducer(reducer, nameArray.map(()=>true));\r\n    const [onValueState, setOnValueState] = React.useState(checkedState.filter(v=> v).length);\r\n\r\n    \r\n    useEffect(\r\n        ()=> {setOnValueState(checkedState.filter(v=> v).length);console.log(\"called yatta\");console.log(checkedState)}, [checkedState]\r\n    )\r\n    /*\r\n    const flipChangeStateIndex = (index:number, checked:boolean) => {\r\n        let nextState = checkedState.slice();\r\n        nextState[index] = checked\r\n        setCheckedState(nextState)\r\n    }*/\r\n\r\n    const flipChangedState = (event:any) => {\r\n        //console.log(checkedState)\r\n        /*\r\n        let nextState = checkedState;\r\n        nextState[Number(event.target.id)] = event.target.checked\r\n        setCheckedState(nextState)\r\n        // setCheckedState(nextState.map(v=>v))\r\n         */\r\n        // flipChangeStateIndex(Number(event.target.id),event.target.checked)\r\n        //flipChangeStateIndex(Number(event.target.id), !checkedState[Number(event.target.id)])\r\n\r\n        /*\r\n        let index = Number(event.target.id);\r\n        let nextState = checkedState.slice();\r\n        nextState[index] = event.target.checked\r\n        console.log(checkedState)\r\n        console.log(nextState)\r\n        setCheckedState(nextState)\r\n         */\r\n        console.log(\"flipChangeState\")\r\n        dispacher(\r\n            {index:Number(event.target.id),\r\n            a:\"a\"}\r\n        );\r\n        console.log(\"end flipChangeState\")\r\n        //console.log(nextState)\r\n        //console.log(checkedState)\r\n    }\r\n\r\n    const [checkedA, setCheckedA] = React.useState(false);\r\n    const handleChangeA = (event: any) => {\r\n        console.log(checkedState)\r\n        setCheckedA(event.target.checked);\r\n        //createResult();\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container fixed>\r\n                <Grid container spacing={2}>\r\n                    {nameArray.map((name,index)=> <MyCheckBox name={name} index={index} flipFunc={flipChangedState} checked={checkedState[index]}/>)}\r\n                </Grid>\r\n                {onValueState}\r\n                <Checkbox defaultChecked checked={checkedState[0]}/>\r\n                <Checkbox\r\n                    defaultChecked\r\n                    checked={checkedA}\r\n                    onChange={handleChangeA}\r\n                    color=\"primary\"\r\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}